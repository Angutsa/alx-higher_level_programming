=======================================================================
Tests for the function:  matrix_divide(matrix, div)
=======================================================================

The function should take a matrix and divide all the floats and integers
by the provided div

::
	>>> import sys
	>>> sys.path.append('..')
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided([[2, 2], [2, 2]], 2)
	[[1, 1], [1, 1]]

'div' must be a float or an integer or a TypeError is raised

::
	>>> matrix_divided([[2, 2], [2, 2]], 'div')
	Traceback (most recent call last):
	TypeError: div must be a number

'div' cannot be 0

::
	>>> matrix_divided([[2],[2]],0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

'div' should be rounded to 2 decimal places before it is used unless it is
a NaN or inf i.e. 5/0.0254 != 196 (196.850393)

::
	>>> matrix = [
	...     [5, 5],
	...     [5, 5]
	... ]
	>>> matrix_divided(matrix, 0.0254)
	[[166, 166], [166, 166]]

if 'div' is inf or NaN, divide anyway

::
	>>> matrix_divided([[2, 2],[2, 2]], float('inf'))
	[[0.0, 0.0], [0.0, 0.0]]

	>>> matrix_divided([[2, 2],[2, 2]], float('nan'))
	[[nan, nan], [nan, nan]]

if any value in the matrix is NaN or inf, divide anyway

::
	>>> matrix_divided([[2, 2],[2, float('nan')]], 2)
	[[1, 1], [1, nan]]

	>>> matrix_divided([[2, 2],[2, float('inf')]], 2)
	[[1, 1], [1, inf]]

	>>> matrix_divided([[2, 2],[2, float('inf')]], float('nan'))
	[[nan, nan], [nan, nan]]
	
	>>> matrix_divided([[2, 2],[2, float('inf')]], float('inf'))
	[[0.0, 0.0], [0.0, nan]]

'matrix' has to be a list of lists with all components being floats or integers

::
	>>> matrix_divided(2,2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix_divided([2],2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix_divided([[2]],2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[2],['i']],2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

'matrix_divided' must return a list the same size as the list passed to it

::
	>>> matrix = [[2], [2]]
	>>> matrix2 = matrix_divided(matrix, 2)
	>>> len(matrix) == len(matrix2)
	True

	>>> for item1, item2 in matrix, matrix2:
	...     len(item1) == len(item2)
	...
	True
	True

No arguments supplied results in an error

::
	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

One argument also results in an error

::
	>>> matrix = [
	...     [5, 5],
	...     [5, 5]
	... ]
	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
